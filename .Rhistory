my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
q()
load("~/Desktop/Coursera Datasci/.RData")
swirl
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
y <- list(2, "b", "a", TRUE).
y <- list(2, "b", "a", TRUE)
type(y)
class(y)
y
type(y[[2]])
type(y[2])
y[[2]]
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Lizzy")
my_name
paste(c(my_name, " "))
paste(c(my_name, collapse= " "))
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 \ 0
0/ 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y < x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- (foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <-c(1:20)
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
names <- c("age", "weight", "bp", "rating", "test")
names <- c("patient", "age", "weight", "bp", "rating", "test")
names <- c("patientt", "age", "weight", "bp", "rating", "test")
cnames <- c("patientt", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
add2 <- function(x, y) {}
add2 <- function(x, y) {x + y}
add(3, 4)
add2(3, 4)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(1:4)
makeVector(1:4)
x <- makeVector(1:4)
x
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(x)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
makeCacheMatrix( x= 1:20, nrow=5,ncol=4 )
makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
x
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
test <- makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
cacheSolve(test)
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("fetching cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(test)
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("fetching cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(test)
test <- makeCacheMatrix( x = matrix(1:20, nrow=4,ncol=4) )
cacheSolve(test)
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("fetching cached data")
return(m)
}
matrix <- x$get()
m<-solve(matrix)
x$setmatrix(m)
m
}
cacheSolve(test)
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y){
x <<- y
invert <<- NULL
}
get <- function() x
setmatrix <- function(solve) invert <<- solve
getmatrix <- function() invert
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
test <- makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
test
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(test)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
cacheSolve(m)
m
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y){
x <<- y
invert <<- NULL
}
get <- function() x
setmatrix <- function(solve) invert <<- solve
getmatrix <- function() invert
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
invert <- x$getmatrix()
if(!is.null(invert)){
message("fetching cached data")
return(invert)
}
matrix <- x$get()
invert <-solve(matrix)
x$setmatrix(invert)
m
}
test <- makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
cacheSolve(test)
cacheSolve(test)
cacheSolve <- function(x, ...) {
invert <- x$getmatrix()
if(!is.null(invert)){
message("fetching cached data")
return(invert)
}
matrix <- x$get()
invert <-solve(matrix)
x$setmatrix(invert)
m
cacheSolve <- function(x, ...) {
invert <- x$getmatrix()
if(!is.null(invert)){
message("fetching cached data")
return(invert)
}
matrix <- x$get()
invert <-solve(matrix)
x$setmatrix(invert)
m
cacheSolve(test)
cacheSolve(test)
test <- makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y){
x <<- y
invert <<- NULL
}
get <- function() x
setmatrix <- function(solve) invert <<- solve
getmatrix <- function() invert
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
cacheSolve <- function(x, ...) {
invert <- x$getmatrix()
if(!is.null(invert)){
message("fetching cached data")
return(invert)
}
matrix <- x$get()
invert <-solve(matrix)
x$setmatrix(invert)
m
}
test <- makeCacheMatrix( x = matrix(1:20, nrow=5,ncol=4) )
test
test
x <- 2
x
x <- 2
x
setwd("~/code/wdi/Projects")
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
dat <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
clean <- i[complete.cases[i]]
count <- length(i$Date)
if( count > threshold ){
full_dat <- rbind(full_dat, count) )
}
print(full_dat)
}
}
if( count > threshold ){
full_dat <- rbind(full_dat, count) )
}
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
dat <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
clean <- i[complete.cases[i]]
count <- length(i$Date)
if( count > threshold ){
full_dat <- rbind(full_dat, count)
}
print(full_dat)
}
}
corr("specdata, threshold = 500")
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
dat <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
full_dat <- rbind(full_dat, current_record)
}
print(full_dat)
}
}
corr("specdata, threshold = 500")
corr("specdata", threshold = 500)
setwd("~/code/wdi/Projects")
corr("specdata", threshold = 500)
files_full <- list.files( directory, full.names=TRUE )
files_full <- list.files( "specdata", full.names=TRUE )
files_full
setwd("~/code/wdi/Projects/datasciencecoursera")
corr("specdata", threshold = 500)
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
dat <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
full_dat <- rbind(full_dat, current_record)
}
}
print(full_dat)
}
corr("specdata", threshold = 500)
corr("specdata", threshold = 1500)
corr("specdata", threshold = 900)
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
current_record <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
corr <- cor(current_record$nitrate, current_record$sulfate)
full_dat <- rbind(full_dat, corr)
}
}
print(full_dat)
}
corr("specdata", threshold = 600)
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
current_record <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
corr <- cor(clean$nitrate, current_record$sulfate)
full_dat <- rbind(full_dat, corr)
}
}
print(full_dat)
}
corr("specdata", threshold = 600)
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
current_record <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
corr <- cor(clean$nitrate, clean$sulfate)
full_dat <- rbind(full_dat, corr)
}
}
print(full_dat)
}
corr("specdata", threshold = 600)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
summary(cr)
length(cr)
submit()
source("submitscript1.R")
submit()
submit()
submit()
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
corr <- function(directory, threshold = 0) {
files_full <- list.files( directory, full.names=TRUE )
dir_length <- length(files_full)
current_record <- data.frame()
full_dat <- data.frame()
for(i in 1:dir_length){
current_record <- read.csv(files_full[i])
clean <- current_record[complete.cases(current_record),]
count <- length(clean$Date)
if( count > threshold ){
corr <- cor(clean$nitrate, clean$sulfate)
full_dat <- rbind(full_dat, corr)
}
}
full_dat
}
submit()
submit()
submit()
